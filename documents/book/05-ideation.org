#+title:        Ideation: Building Second Brain with Denote
#+startup:      overview
#+bibliography: ../library/emacs-writing-studio.bib
#+todo:         DRAFT EDITED | REVIEWED FINAL
#+macro:        ews /Emacs Writing Studio/
:NOTES:
- [X] [[denote:20230907T074555][Note-taking methodologies]]
- [X] One file vs multiple files
- [X] [[denote:20220918T055032][Building a Second Brain]]
- [X] [[https://en.wikipedia.org/wiki/Commonplace_book][Commonplace book - Wikipedia]]
- [X] [[denote:20220718T175338][Zettelkasten]]
- [X] [[denote:20230822T091357][Zettelkasten as septic tank and primordial soup]]
- [X] [[denote:20230909T192133][Note taking habits of college students]]
- [X] [[denote:20210728T184400][Taking Notes]]
- [X] Fleeting notes configuration
- [X] https://protesilaos.com/codelog/2024-03-22-re-advice-emacs-note-taking/
:END:

As you read literature and websites or consume any other source of information you might like to take notes of what you have learned. Note taking has been a popular topic the past years. The market of ideas is flooded with methods to take and maintain notes, all promising to create a digital second brain or zettelkasten.

This chapter explains how to use the Org mode and the Denote package and some of its extensions to keep an electronic notebook and build your digital ideas garden. The method described in this chapter is agnostic to any such method, but Emacs is flexible enough to let you implement any method you prefer.

This first part of this chapter explains how to use Org mode as a frictionless note-taking tool, using a single file to capture your thoughts. The remainder of the chapter describes the Denote package by Protesilaos (Prot) Stavrou. This package provides flexibility in managing an extensive collection of textual notes and other file types to develop an interconnected second brain, using your chosen workflow.

* Thoughts on taking notes
:PROPERTIES:
:WORDCOUNT: 816
:END:
Before the invention of writing, knowledge passed between generations by memorising everything. People from these prehistoric cultures were able to recite from memory thousands of lines from great works such as the Iliad, the Mahabharata, and other epics, aided through songs and rhyme. Words that rhyme are much easier to remember than plain prose. Think about the song lyrics you can remember flawlessly but struggle to memorise a shopping list.

When writing became common, Greek philosopher Socrates lamented in his dialogue with /Phaedrus/ that it erodes our memory. Socrates' argument was perhaps factually correct. However, writing has freed our minds from being a storehouse of factual knowledge to being a creative machine. The development of humanity accelerated when writing allowed people to free their minds from facts and use this brainpower to create new ideas. Productivity guru David Allen expressed it succinctly when he wrote, "The mind is for having ideas, not for holding them" [cite:@allen_2005_gett]. Philosophers refer to Allen's intuition as the /extended mind thesis/, which suggests that the mind does not exclusively reside in the body but extends into the physical world [cite:@clark_1998], which led to the idea of the second brain.

Taking notes to extend the fragility of human memory is as old as the art of writing itself. Since the 1970s, humanity has transitioned from writing words on paper to keeping them in electric storage. In recent years, the need to keep notes has resulted in a cottage industry of blogs, books, YouTube channels and electronic note-taking applications to help people organise their mind and life. Whether Luhmann's /Zettelkasten/, Carroll's /Bullet Journal/, or Forte's /Second Brain/, they all profess to solve personal knowledge management challenges by following a specified method.

These rigid workflows inevitably lead to failure because everybody has different needs. When taking notes creatively, the formal workflow only matters little. As you develop your notes, your own personal methodology emerges organically. So, rather than worrying about some method promoted on the internet, start writing and create a process that best suits your needs.

The best note-taking method is the one you develop yourself and that organically grows in complexity. An electronic second brain does not automatically lead to success, your organic brain should dictate the second one and not vice versa [cite:@prot_2024].

In my three decades working with both paper and digital journals, I've learned that the structure of notes is not the most critical aspect. What truly matters is the authenticity and originality of the recorded thoughts. Even Luhmann, the creator of the Zettelkasten method, saw his system as a "septic tank for ideas" [fn:5-1]. However, we can apply some logic to our workflow to create order in the chaos, and Emacs provides powerful tools to assist.

Using Emacs for taking notes, or any other text processor, does have limitations. My personal ideation process starts with a physical notebook. This might be a strange thing to admit by somebody who professes admiration for the electronic virtues of Emacs. Physical notebooks have some advantages in the creative process. Firstly, you can use them everywhere without batteries. The only exception might be in the shower, paradoxically, the place where we get our best ideas. Using a notebook is also a slower process than using a keyboard, which might seem a disadvantage, but using a pen forces you to think more deeply. Writing on paper enhances creativity by triggering deeper neural pathways than writing electronically [cite:@mueller_2014;@umejima_2021_paper;]. Writing on paper also makes it easy to combine graphics with text. Doodling and sketching are great ways to conceptualise knowledge, which is one thing a text processor such as Emacs cannot provide.

Putting the disadvantages of textual notes aside, electronic notes definitely have a use. Once my notebook's ideas germinate, some find a place inside my Emacs filing system. My workflow also includes scans of sketches in my notebook, photographs, videos and electronic files emailed to me. All files are stored in an organised system which makes it is easy to find information and germinate new ideas. This workflow embraces the flexibility of working on paper and harnesses the power of electronic information.

The practical reality of taking notes is that we can distinguish between two categories: fleeting and permanent notes [cite:@ahrens_2017_how]. A fleeting note is a quick notation that might be only temporary. You take fleeting notes on a napkin or the back of your hand. Most fleeting notes have a short lifespan, but some are promoted to a permanent status. As the name suggests, a permanent note is information you like to keep in perpetuity. Your permanent notes form your personal wiki, second brain, Zettelkasten, digital garden or whatever neologism you might like to use.

[fn:5-1] Niklas Luhmann-Archive, ZK II Zettel 9/8a2 (=niklas-luhmann-archiv.de=).

* EDITED Fleeting notes
:PROPERTIES:
:WORDCOUNT: 513
:CUSTOM_ID: sec:fleeting
:END:
Fleeting notes capture those unexpected ideas that flit through our mind. A sudden insight, a movie quote, or a to-do list reminder. These fleeting notes are temporary parking spots for thoughts. They might be ideas for a future project, tasks to complete, or something interesting to revisit later. We need a frictionless capture system, like a trusty paper notebook, a phone app, or even the back of our hand to prevent these from disappearing.

The need to take fleeting notes also arises while using Emacs. You can leverage Org mode's capture feature for this purpose. Imagine writing a book when you suddenly remind yourself that you need to buy some milk; Org mode in Emacs lets you capture this fleeting thought with just a few keystrokes, saving it for later review without derailing your current focus.

Capturing a fleeting note with Org mode's capture feature is a simple process. Just press =C-c c= (org-capture), and a selection screen pops up. Select 'Fleeting Note' with =f=, write your thoughts into the popup buffer, and press =C-c C-c= to save the note under the 'Notes' heading in your inbox as a list item. The capture system adds consecutive fleeting notes below the previous ones. If you decide it was not worth storing this thought, press =C-c C-k= to cancel the input. Once you're done, Org mode returns to where you left off, and you can happily proceed with your work with minimal disturbance. The capture menu also has an option to add an item to your todo list, stored in the same file but under a different heading. Chapter [[chap:management]] discusses how to manage projects and action lists in Org mode.

The ~org-default-notes-file~ variable defines the name and location of the inbox. By default, this variable is =~/.notes=, which is a hidden file. You can customise this variable to set your preferred inbox file. The file is automatically created when you first use the capture mechanism. You are, of course, free to directly add other information to this file. The capture mechanism will search for the defined headers and place any new items underneath them.

As you create more fleeting notes, your inbox steadily fills with random musings. To keep your inbox as empty as possible, it's a good habit to develop a weekly review. This review involves converting promising thoughts to a permanent note or trashing them after they expire. Ideally, your Inbox should trend towards zero content, as discussed in chapter [[chap:management]]. You can use the universal argument with the org-capture command (=C-u C-c c=) to jump to the file for your chosen template.

The Org mode capture functionality is a versatile system that allows you to craft templates for different types of notes. You can develop bespoke templates that capture information into various files and include metadata, such as timestamps and other properties. The Appendix explains how to modify the capture system to meet your needs.

* EDITED Permanent notes
:PROPERTIES:
:WORDCOUNT: 1405
:END:
Your notes are a treasure trove that slowly develops over the years. Permanent notes form an external electronic storehouse of information that you can structure and search to create new insights.

Many different ways exist in Org mode to store permanent notes. Don't worry too much about which method to use when you start your collection of electronic notes. You can start with a single file and just write. Your ideal workflow will emerge from your personal needs as the need arises. The key to writing good notes is not worrying about the second brain, as your first brain is much more important in the creative process [cite:@prot_2024].

Create an Org mode file, give it a suitable title, and start writing. Use a heading for each note to add a succinct title. You can also group your notes by using level one headings as categories and lower levels for the actual notes.

If you want to add a timestamp to record when you took the note, use the ~org-time-stamp~ function. Calling this function with =C-c .= (control and full-stop) adds a date, and with a universal argument, the time is also included (=C-u C-c .=). A note under the philosophy category could look something like this:

#+begin_example
 * Philosophy
 ** Socrates against writing
    <2024-04-20 Sat>
    In the Phaedrus, ...
#+end_example

A few tools in Emacs and Org mode help to manage an extensive collection of notes in a single file. To view the table of contents of a file when you open it, add =#+startup: content= to your front matter. With this keyword, Org mode only shows headings when the file is first opened. Org mode's ability to fold and unfold headings with =S-TAB= lets you focus on what is essential. Some other startup options are =overview= to only show the first level and =showall= to unfold the whole document, except for drawers. The default option is =showeverything=, which does not hide any part of the document.

Another method to create focus within large files is to narrow the buffer to show only the section you are working in. The =C-x n= prefix key brings you to the narrowing functionality. The ~org-narrow-to-subtree~ function (=C-x n s=) narrows the current buffer to only show the content of the section that the cursor is in. The other text is not erased; it is just hidden from view. To revert to the complete buffer, use the ~widen~ command, bound to =C-x n w=. The narrowing functionality has a few other options, which you can explore through the popup menu when you invoke the prefix key.

Yet another method to focus on relevant parts of your document is to construct a sparse tree with the ~org-occur~ function, evoked with =C-c / /=. Sparse trees provide filtered views based on search criteria and highlight relevant text while hiding unrelated content. After entering the search criterion, Org mode collapses all headings, highlights the requested words and only shows the sections where the search term occurs. Two shortcuts let you jump between the matches: =M-g n= jumps to the next match and =M-g p= to the previous one. Using any editing command or =C-c C-c= exits the search. The main difference between a sparse tree and the regular search functionality (section [[#sec:search]]) is that a sparse tree collapses your document to only show the sections where the search occurs.

Adding notes to categories by structuring headings is helpful but limited because a note can only be part of one category. Org mode can also add tags to each heading to relate notes to each other. A tag is a label or a category for a headline that helps to group related headings. Tags appear after heading text, nested between colons. Tags are inherited properties, meaning any tag at a level one heading also belongs to the relevant subheadings. So, in the example below, all subheadings under the philosophy heading inherit the =:philosophy:= tag. Any subheadings under the note about Socrates will also inherit both the =:philosophy:= and =:writing:= tags.

#+begin_example
 * Philosophy                         :philosophy:
 ** Socrates against writing          :writing:
    <2024-04-20 Sat>
    In the Phaedrus, ...
#+end_example

You add a tag to a note with =C-c C-q= (~org-set-tags-command~). Type the name of the new tag in the minibuffer. Any tags already used in the document are displayed in the minibuffer completion list. You can also set a library for each file by adding something like this to the front matter of the Org file: =#+tags: philosophy(p) writing(w)=. The letters between parentheses become a shortcut in the minibuffer menu for fast selection. To create a new tag, just type free text into the minibuffer. Once you have a file with tagged entries, you can use this to search notes by category using the /sparse trees/ functionality. To select one or more tags for a sparse tree, use ~org-match-sparse-tree~ (=C-c \=). This function collapses the whole document and highlights the sections where the selected tags occur.

The Consult package by Daniel Mendler includes a convenient function  to move around large Org mode files. The ~consult-org-heading~ function (=C-c w h=) provides al list of all headings in the current Org mode file in the minibuffer, from where you can navigate to the desired location. The Consult package provides a broad range of search and navigation commands to improve the way you use Emacs.

A further tool to manage large files is the ~org-refile~ function, bound to =C-c C-w=. This command lets you easily move sections to another section in your document. When evoking this function, a list of names of chapters (level 1 headings) in your document appears in the minibuffer. The subtree that the cursor is currently in will move to the selected chapter. To jump to the relevant entry, use the =C-u C-u C-c C-w= shortcut (two universal arguments before the command). Another method to refile your headings is with the Alt and arrow keys, as explained in section [[#sec:org-structure]].

Lastly, you might want to create links between notes in a file. we have already seen file links in section [[#sec:images]], but we can also link to a heading within an Org mode file. The easiest way is to create an internal link with =C-c l= and enter the name of the heading you need to link to and add a description. The link now looks something like this:

=[[* Heading name][Description]]=

The problem with this approach is that the name of the heading might change or perhaps you misspelled it. When following a link to a non-existing target Org mode does not throw an error but asks whether you like to create a new heading. A better approach to linking is giving the heading a unique ID. EWS is configured so that Org mode create a unique ID for a heading. To create a link between notes in a single note document, move the cursor to the heading you like to link to and press =C-c l= (~org-store-link~). This function create a drawer underneath the heading. , A drawer is a section of collapsible text that can store metadata about a heading. Drawers are useful for a lot of tasks, and are further discussed in chapter [[#chap:production]]. The drawer might look something like this:

#+begin_example
 :PROPERTIES:
 :ID:       d454979b-2d40-4f95-9f85-f5d9314c28d7
 :END:
#+end_example

The random string of number is a Universally Unique Identifier (UUI), which creates a random ID. The likelihood of a duplicate ID is so astronomically small that we can consider it unique. A link to this ID is now stored in memory and you can insert it where you need it with =C-c =C-l= (~org-store-link~). A link to an ID looks like this under the hood:

=[[id:d454979b-2d40-4f95-9f85-f5d9314c28d7][Example]]=

Using one large file for your notes is a great way to commit your thoughts to Emacs. However, the file can become unwieldy after a while, and if you get really productive, a large file can slow down the system. The next section shows how to use the Denote package to write your notes as a collection of interconnected notes.

* EDITED Writing notes with denote
:PROPERTIES:
:WORDCOUNT: 4470
:CUSTOM_ID: sec:denote
:END:
Most note-taking systems use separate files for linked individual notes to create a network of ideas. Emacs users have developed a slew of packages to write and manage collections of notes. EWS uses the Denote package. This package does not enforce any methodology or workflow, and it can process both written notes in plain text and binary files, such as photographs, PDF files, or anything else you would like to archive.

The Denote package categorises your files using keywords. There is also an option to add a signature, which can designate a sematic order for notes. Notes can also link to each other to form a network of thoughts. With these three mechanisms, you can use Denote to create an organic digital garden or implement a formal system, such as Zettelkasten, Johnny Decimal, PARA or methods that don't even exist yet.

The driving force of the Denote package is its file naming convention. This approach embeds metadata in the filename, so there is no need for a database or any other external dependency to navigate your jungle of notes. The Denote file naming convention has five parts (all in lowercase by default), of which only the ID and file extensions are compulsory. An example of a fully formatted Denote file is.

#+begin_example
  20210509T082300==9a12--simultaneous-contrast__colour_illusion.org
#+end_example

1. Unique identifier (ID) in ISO 8601 time format with a =T= separating date and time (=20210509T082300=).
2. Signature (lowercase letters and numbers), starting with a double equals sign (===9a12=). 
3. Title separated by dashes (kebab-case), starting with a double dash (=--simultaneous-contrast=).
4. Keywords separated by an underscore (snake_case), starting with a double underscore (=__colour_illusions=).
5. Filename extension (=.org=).

The timestamp is a unique and immutable identifier Denote uses to link notes. The timestamp orders our notes chronologically, but that might not always be the best option. The signature lets you order your notes just like the Dewey Decimal System orders books on the shelves of a physical library. The keywords or file tags define the categories that a note belongs to. This part of the Denote structure lets you group notes that have something in common. The signature, title and tags are flexible and can change over time. The timestamp should always stay the same to maintain the integrity of links between notes.

The file naming convention in Denote places some limitations. The Denote signature can only contain letters, numbers and the equals sign to maintain the integrity of the system. The title only letter, numbers and dashes. Keywords can only contain letters and numbers. Denote cleans (sluggifies) file names to enforce compliance with the convention.

Denote stores new notes in the same folder, signified by the ~denote-directory~ variable, which defaults to =~/Documents/notes=. You can customise this variable to suit your needs. Use the ~customize-variable~ function, add the new location and click the "Apply and Save" box.

Denote can store notes in subdirectories within this primary location, but there is no need to do so. When subdirectories categorise files, a part of the metadata for that file disappears as soon as you move the file to another location. Also, a file can only reside in one directory, sit it is not an ideal method to organise information.

Modern operating systems can effortlessly manage tens of thousands of files in one directory, so there is no need to use subdirectories. Instead of subdirectories you can use file tags, which makes it easy to view files that logically belong in the same group. File tags are more flexible than subdirectories because each file can have more than one tag, but can only live in one directory.

In EWS, all Denote functionality is available under the =C-c w d= prefix. The ~denote~ function, which you activate with =C-c w d n=, creates new notes as Org mode files. It first asks for a title and then for the relevant keywords. You either select a keyword from the completion list of existing notes in the minibuffer with the =TAB= key or enter new ones as free text, separated by a comma. The timestamp is automatically generated using the date and time you create the note. You can also activate this command with the Org capture system and select 'Permanent Note'.

Note that when creating a new note, it first opens as an unsaved buffer. You will need to save it to disk with =C-x C-s= to make it permanent. When you create a permanent note with the Org capture mechanism saves the note when exiting the capture popup screen with =C-c C-c=. Some functionality might not work unless you have saved the note to disk,so if you get a warning that says "Buffer not visiting a Denote file", you might have to save the buffer first so the software can recognise it.

The default EWS configuration does not require a signature or a subdirectory for new notes. You can customise the ~denote-prompts~ variable to define the default way Denote generates and renames files by ticking the items you like to include when creating an new note.

The note's title becomes part of the filename. The date and identifier are also part of the header of the file. Keywords become file tags, which are the same as tags we saw in the previous section, but they apply to the whole file. Now, all you have to do is fill the buffer with relevant content and save it to disk. The front matter of the note in the example above would look like this.

#+begin_example
 #+title:      Simultaneous Contrast
 #+date:       [2021-05-09 Sun 08:23]
 #+filetags:   :colour:illusions:
 #+identifier: 20210509T082300
#+end_example

Not all permanent notes are created equal and the relevant workflow within Denote depends on their purpose. Broadly speaking, we can distinguish between five types:

1. /Generic notes/: General ideas.
2. /Journal entries/: Experiences related to a specific time.
3. /Literature notes/: Notes about a publication.
4. /Attachments/: Read-only notes, such as photographs or PDF files.
5. /Meta notes/: Notes that link to all notes meeting a search criteria.

The first type of note can be anything you want it to be, so there is nothing particular to discuss. The other permanent note types are discussed in the next four sections.

** EDITED Keep a journal or diary
You can use Denote for personal reflection, to create a journal, a laboratory logbook, to add meeting notes, or to record any other notes related to an event. Writing a journal with Denote is easy because the identifier for each note indicates the date and time you created it. Adding a standard tag, such as =_journal=, makes your journal entries easy to distinguish from other notes, or whatever makes sense in your native language.

If you create a note for an entry in the past, use the ~denote-date~ function (=C-c w d d=). You enter the date in Year-Month-Day (ISO 8601) notation like =2023-09-06=. Optionally, you can add a specific time in 24-hour notation, for example =2023-09-6 20:30=. Denote uses the present date or time if no date and/or time is provided. 

Denote also comes with a collection of special functions for journaling, which you can read about in the package's manual (=C-h R denote RET g jour RET=).

** EDITED Literature notes
:PROPERTIES:
:WORDCOUNT: 971
:END:
:NOTES:
- [X] Writing literature notes
- [X] citar-denote
- [-] [[https://benadha.com/notes/how-i-manage-my-reading-list-with-org-mode/][How I Manage My Reading List with Org-Mode · Adha's Notes]] (advanced Org mode)
:END:
As the name suggests, a literature note contains a summary or an interpretation of the literature you read. A bibliographic note is a special category of permanent notes that link to one or more publications in your bibliography. The Citar-Denote package integrates the Citar bibliography package with the Denote note-taking system. This package provides extended functionality to create and manage bibliographic notes. Refer to chapter [[#chap:inspiration]] to find out how to create a bibliography and use Citar.

Citar-Denote allows a many-to-many relationship between notes and entries in your BibTeX files, providing a complete solution for documenting literature notes. This means you can add multiple notes per bibliographic entry or one note for more than one piece of literature. You could create a note about each book chapter or write a single literature review note for a collection of journal articles, whatever suits your workflow best.

Citar-Denote relates a note to an entry in your bibliography by using the citation key as a reference in the front matter. Each bibliographic note is also marked with the =_bib= file tag. This tag reduces the number of Denote files the system needs to track. The front matter for a bibliographic note could look something like this:

#+begin_example
  #+title:      Marcuse: An Essay on Liberation
  #+date:       [2022-11-12 Sat 19:23]
  #+filetags:   :bib:culture:marketing:philosophy:
  #+identifier: 20221112T192310
  #+reference:  marcuse_1969_essay
#+end_example

Open the Citar interface with =C-c w b c= (~citar-create-note~) to create a new note. Select the entry you want to write a note for, hit =ENTER= and follow the prompts (Figure [[fig:citar-menu]]). You can create additional notes for this entry if a note already exists.

Once you have collected some bibliographic notes, you will want to access and modify them. You can access the attachments, links and other notes associated with the references from within via the Citar menu with =C-c w b o= (~citar-open~). From this menu, you can also create additional notes.

Entries with a note are indicated with an =N= in the third column. To only show those entries with a note, start the search with =:n= or use ~citar-denote-open-note~ (=C-c w b n=) to open the Citar menu with only entries with one or more associated notes.

#+caption: Screenshot of Citar and options for one of the entries.
#+name: fig:citar-resources
#+attr_html: :alt Screenshot of Citar and options for one of the entries :title Screenshot of Citar and options for one of the entries :width 80%
[[file:images/citar-menu-resources.png]]

Several functions are available to manage the current buffer when inside a bibliographic note. The ~citar-denote-dwim~ function (=C-c w b d=) provides access to the Citar menu for the referenced literature in this note, from where you can open attachments, other notes, and links. The ~citar-denote-add-citekey~ function (=C-c w b k=) adds citation keys or converts an existing Denote file to a bibliographic note. When converting a regular Denote file, the function adds the =bib= keyword to the front matter and renames the file accordingly. This function opens the Citar selection menu and adds the selected citation keys to the front matter. You remove citation references with the ~citar-denote-remove-citekey~ command (=C-c w b K=). If more than one publication is referenced, select the unwanted item in the minibuffer first. When the note only has one reference, the bibliography keyword is removed, and the file is renamed, converting it to a generic permanent note.

What is the point of building a bibliography without citing or using each in a bibliographic note? The last two functions let you cite literature or create a new bibliographic note for any item not used in your Denote collection. The ~citar-denote-nocite~ (=C-c w b x=)  function opens the Citar menu and shows all items in your bibliography that are neither cited nor referenced. From there, you can create a new bibliographic note, follow a link or read the file.

** EDITED Attachments
:PROPERTIES:
:CUSTOM_ID: sec:attachments
:WORDCOUNT: 655
:END:
Denote's reliance on a filename to store metadata allows you to manage files other than the three plain text types specified by Denote, which we can call attachments. An attachment is a file with a compatible filename, except those files that Denote creates. Denote recognises any file stored in the Denote directory that follows its file naming convention, which can be linked inside a Denote note.

Your digital notes garden can be much more than just text. You can manage your photographs with Denote and store an archive of PDF files, such as bank statements, course certificates, or scans of your paper archive. Extending Denote with attachments converts your list of notes to a complete personal knowledge management system with easy heuristics to find your documents and link them to notes.

There are numerous use cases for extending Denote to binary files. I personally save my photographs and videos in the Denote file format. I also store PDF files, such as scanned paper documents or files I receive in this format, such as invoices. You can also link to individual attachments inside a Denote file in the same way you link your notes. However, it is not possible to link back from an attachment to a note using Denote, as these files are not notes.

The first step to register an attachment in Denote is to ensure it has a compliant and correct name. You can either rename a file manually or use the ~denote-rename-file~ function (=C-c w d r=) within the Dired file manager (section [[#sec:dired]]). This function uses the filename as a default title, which you can modify as needed and you can add relevant keywords. The last modified timestamp of the file will serve as its identifier.

However, the creation date on the file system is not always the actual creation date. When working with attachments, there are three options for a valid timestamp, the date and time when the:

- Digitised paper document was created
- Electronic file was born (first creation date)
- Electronic file was created on the file system (Denote default)

The first scenario mainly relates to historical documents. Over the years, I have gradually digitised my paper archives. The earliest identifier timestamp in my Denote library is =13700623T120000=, a scan of a medieval document that holds the mortgage of my birth house. The original creation date of the document (when it was scanned) is in 2021, and the date on my file system is some time in 2023. The Denote renaming function uses the file system date, which is not ideal. This document requires manually entering a timestamp that places the document in the distant past.

The second scenario mainly occurs with photographs. The timestamp on the file system might not be the same as when the picture was taken. So, in this situation, we need to know when the photo was taken. For recent picture you can extract the creation date from the file's metadata. Several tools, such as ExifTool, are available to extract metadata from photographs and PDF files.

Chapter [[#chap:admin]] how to manage your files in more detail, including using special packages and Denote to manage your photograph collection.

** EDITED Meta notes
:PROPERTIES:
:CUSTOM_ID: sec:meta
:WORDCOUNT: 467
:END:
Meta notes, the last type of permanent note, serve as a gateway to other notes on a similar topic. Dynamic blocks, a versatile feature in Org mode, excel at aggregating your thoughts and linking to relevant notes. These blocks provide a seamless entry point to your note collection and serve as a starting point for your writing projects. A meta note could contain a list of all notes within a category or an ordered list of notes that match part of a signature.

Let's say that you are working on a project to write a paper about the /Daimonion/ (prophetic monitor) that spoke to the ancient Greek philosopher Socrates. You read the literature and create a bunch of permanent and bibliographic notes that use the =_daimonion= keyword. When it is time to gather your thoughts into an integrated view, you can create a new note that links to all your relevant notes.

In Org mode, a dynamic block is a section in your document that can be updated using a function. Denote offers functions to add dynamic lists of links to other documents, which are incredibly handy as they always reflect the latest version of your note collection. To use this feature, simply invoke the ~denote-org-extras-dblock-insert-links~ function  (=C-c w d I=), and provide a search string that matches the notes you want to list (in this case, it's =_daimonion=).

Denote will insert a block in your note that lists all notes matching this search criterion. The dynamic block is enclosed between two lines: =#+BEGIN:= and =#+END:=. If you add new notes with the Daimonion tag, simply place the cursor on the beginning or end lines and use =C-c C-c= to update the list. To modify the search criteria, edit the text between the quotation marks after the =:regexp= part of the first line and update the dynamic block.

#+begin_example
 #+BEGIN: denote-links :regexp "_daimonion"
 - Plato: Apology
 - Socrates and Plato
 - Plato: Crito
 #+END:
#+end_example

A regular expression is an advanced search term much like using wildcard in filename but with much greater power. This approach could, for example, collate your journal notes for a particular month. Using the regular expression =^202309.*_journal= lists all journal entries for September 2023. This regular expression lists filenames that start with =202309= and include the =_journal= keyword. The tilde (=^=) denotes that you are searching at the start of the filename. The =.*= in the middle of the regular expression indicates that any character (=.=) can appear multiple times (=*=). Regular expressions are a powerful tool for searching, but detailed discussion is outside the scope of this book.

** EDITED Linking notes
:PROPERTIES:
:WORDCOUNT: 508
:END:
The Denote signature and keyword offer a unique way to categorise and rank notes, ordering and grouping similar ideas. Additionally, Org mode can also become a personal wiki by linking notes. While the term 'personal wiki' may seem contradictory, given that wikis are collaborative writing tools, the power of linking notes allows for the creation of an interconnected web of ideas.

Org mode features a versatile system of links. In the previous chapter, we explored how to add hyperlinks to the World Wide Web and links to images (section [[#sec:rss]] and chapter [[#chap:ews]]). Org mode can recognise various types of hyperlinks, including links to other files, internal links, and other special formats.

To create a hyperlink from an Org mode file to another file use =C-u C-c C-l=, navigate to the target file and enter a description. The link is now active and you can follow it with ~org-open-at-point~, bound to =C-c C-o=. Linking to other documents is a great way to structure your file system, but this method has a problem because the link breaks as soon as the target file changes name or location.

Denote enhances Org mode's functionality by creating stable links between notes. A denote link only stores the identifier of the target file, so the signature, name and keywords can change freely without the risk of creating dead links.

You can link notes and attachments with the ~denote-link-or-create~ function (=C-c w d i=). This command lists all available notes using the minibuffer completion system, from which you can select one and hit enter. To modify the link's label, press =C-c C-l= (~org-insert-link~) while the cursors is on the link and follow the prompts. The source of a Denote link looks something like this:

=[[denote:20210208T150244][Description]]=.

If you enter a name for a note that does not yet exist, Denote will first let you create a new note and then link to it. Denote links are indicated with italics in EWS to distinguish them from links to other resources, such as websites.

Denote can also create links to headings inside of other Org mode notes. The ~denote-org-extras-link-to-heading~ function (=C-c w d h=). This function will assk for the Org mode file to link to and then shows a menu of the headings inside this file. When you now click on the new link, it will take you directly to the heading inside the other file.

You don't need to search through a document to find relevant links. Jump to any linked note without placing the cursor on it with ~denote-link-find-file~ (=C-c w d l=). This function shows all notes linked from the open note in the minibuffer where you can select the one you like to jump to. To find out which notes link to the one you are currently reading, use the ~denote-find-backlink~ function (=C-c w d b=). 

** EDITED Finding notes and attachments
:PROPERTIES:
:WORDCOUNT: 593
:END:
When collecting thousands of notes and attachments, it is important to have pathways in the system to find the information you need or to make new connections between ideas. The most straightforward method to find files is opening one with the standard ~find-file~ function. The minibuffer completion system helps you to find what you need.

If, for example, you like to filter notes tagged as 'economics', type =C-x C-f=, move to your notes folder, and type =_economics=. Minibuffer completion narrows the available options. If you need a note with economics in the title but not as a tag, use =-economics=. If you type =economics= without a prefix, then you see all posts with the search term in the signature, title or as a tag. You can also introduce regular expressions (section [[#sec:meta]]) to increase your search power. As the minibuffer completion uses the Orderless package, a space effectively acts as an AND expression. So using =^2022 ===9a _art= searches for all notes with a file name that starts with (=^=) 2022 and include a signature that starts with 9a (==9a=) and have the =_art= file tag.

The Consult-Notes package by Colin McLear merges the capabilities of Denote and Daniel Mendler's Consult package to help you find notes without remembering which directory they live in. This package also provides facilities to search through the content of your notes, with assistance from external software.

To find a note by any part of its filename, use the ~consult-notes~ function bound to =C-c w f=. The Consult package provides live previews of the files that match the search.

Searching for titles, tags, and other metadata is a powerful way to access your information. While that is a good start, sometimes, you will want to search through the content of your notes instead of just to titles and metadata. The ~consult-notes-search-in-all-notes~ function (=C-c w d g=) activates a deep search. For this purpose, the package uses the Grep software, which needs to be available on your system. For even faster searching you might like to use the ripgrep package instead. The ~consult-notes-use-rg~ variable defines the default search program.

The search is incremental, just like minibuffer completion. As you type your search criterion, a list of results appears. The results show the filename and the matching lines within each file. The search term starts with a hashtag; when you type another such symbol, for example, =#topology# ball=, the next part will be searched within the results. So this example will find all notes with the word topology and withing  these the ones with the orwd "ball".

* Note-taking systems with denote
:PROPERTIES:
:WORDCOUNT: 1304
:END:
The Denote package is flexible and malleable, so you can use it to implement any published note-taking methodology. This section provides some suggestions on how to implement each of these methods. EWS does not promote any note-taking systems. This section only demonstrates how you could implement them. Try not to get distracted by 'shiny-object syndrome' and focus on what is useful (writing), rather than chasing the latest ideas. The ideal method is one that you grow organically based on your needs. The power of the Denote file naming convention and regular expressions basically provide everything you need at your fingertips. 

** EDITED Para
:PROPERTIES:
:WORDCOUNT: 1195
:END:
Tiago Forte has developed the PARA method to organise your digital life [cite:@forte_2022_buil]. In his system, all digital assets form part of one of four folders:

1. /Projects/
2. /Areas/
3. /Resources/
4. /Archives/

Forte uses a cooking example to explain para. The /Projects/ are the pots and utensils you need to prepare a dish. Files in this category are the material you need to work on for your current deliverables. The /Areas/ are like the ingredients you store in the fridge. These are notes that you need to access regularly. The third category is /Resources/, which relates to items stored in the freezer. These are topics that interest you or research material. Lastly, the /Archive/, which we can call the pantry, contains completed projects or those that are on hold.

The key to this method is that each file belongs to only one of these four categories. A file could start as a resource, become a project, and end its life in the archives. Forte used four directories to store material from each category in his original idea. You can implement this method in Denote by associating each note with one of four tags. Ideally, each note should belong to only one of these four categories. To list all notes in your /Projects/ category, open ~consult-notes~ and search for =_projects=, and so on.

EWS includes a bespoke function to implement Forte's PARA method with Denote. The Denote-Explore package includes the ~ews-denote-assign-para~ function that moves a note to one of the four PARA categories by assigning a keyword to the note. If a PARA keyword already exists, it is replaced with the new version.

The ~ews-para-keywords~ variable contains the keywords used in this method. You can customise this variable to translate it into your native language or use a different set of exclusive categories. You can, for example, also configure this variable to implement the ACCESS system by changing the options to Atlas, Calendar, Cards, Extras, Sources, Spaces and Encounters. Any file management system that depends on folders can be replaced with Denote keywords in this way.

If you insist on using folders instead of keywords, then that is also possible in Denote. Customise the ~denote-prompts~ variable to ask for a subdirectory so that you can select a subdirectory in your notes folder when creating a new note.

** EDITED Johnny.Decimal
:PROPERTIES:
:WORDCOUNT: 794
:END:
The /Johnny.Decimal/ System uses a numbering scheme to organise files, created by Johnny Noble (=johnnydecimal.com=). The basic idea is to assign your digital life a maximum of ten broad areas. Feel free to start with fewer than ten categories. You can begin with, for example, just /work/ and /personal/. These main categories are the shelves in your digital library.

Each shelf can accommodate up to ten boxes, allowing you to define not more than ten boxes for each shelf. This flexibility means you can tailor the system to your needs. For instance, in our example, we could have boxes for /finance/, /writing/ and /travel/ on the /personal/ shelf. The third step involves assigning numbers to each of the categories. /Johnny.Decimal/ starts with 10--19 because lower numbers relate to system maintenance. The 00 folder usually contains an index to help you navigate the numbering system.

In our example, /personal/ is shelf 10--19, and the boxes are numbered from 11 to 19, for example /finance/ (11), /writing/ (12), and /travel/ (13). There is room for seven more boxes, don't use that capacity until the need arises. In the original system, the numbers form the start directory names. The Johnny.Decimal website provides a detailed description of this method. The /Johnny.Decimal/ system works pretty much in the same way as the Dewey Decimal system in a library, but then with fewer categories. The /Johnny.Decimal/ system describes your life, while the Dewey Decimal system describes humanity's knowledge. You could of course also categorise your notes using Dewey Decimal approach, the choice is yours.

You can implement Johnny or Dewey Decimal, or any other system that uses ordered numbering by adding a Denote signature. Denote does not use signatures by default. Customise the ~denote-prompts~ variable and tick 'signature' to include these in new notes.

For example, a note about EWS could have =12=03= as a signature, indicating it belongs to the /writing/ box on the /personal/ shelf. You could use a third level in your box to number individual files, so a file in the /writing/ box could be numbers as =12=03=01=. =12=03=02= and so on. You can use meta notes (section [[#sec:meta]]) to list all the files within this box. By changing the =sort-by-component= to =signature= to order the links in the list. Without this sorting instruction, notes are ordered by ID.

#+begin_example
 +BEGIN: denote-links :regexp "==12=03" :sort-by-component signature
 - 12=03=01 ews purpose
 - 12=03=02 zettelkasten
  - ... etc.
 +END:
#+end_example

** EDITED Zettelkasten
:PROPERTIES:
:WORDCOUNT: 366
:END:
Many people are attracted to note-taking when they hear about Niklas Luhmann's Zettelkasten concept. A Zettelkasten is a German word for a box (Kasten) that contains notes (Zettels). Luhmann was an influential sociologist famous for his enormous productivity and expansive note collection of over ninety thousand interconnected index cards. His Zettelkasten helped with his extensive research output. He was also a workaholic, so using a system does not make you magically more productive.

The Zettelkasten method, essentially a paper version of a personal wiki, is not a concept unique to Luhmann. In fact, it was a recommended research method during my university days. I remember spending countless evenings at the dining table, rearranging index cards to structure my essays. What sets Luhmann apart is his unwavering discipline in note-taking, a trait that continues to inspire many. This adaptability is one of the key strengths of the Zettelkasten method.

Luhmann's method for his Zettelkasten included a signature that links cards sequentially in a branching hierarchy. The main difference between /Johnny.Decimal/ and Zettelkasten is that in the former system, only folders have numbers; in Zettelkasten, each note is numbered. Luhmann's original Zettelkasten has at least six levels of nested categories. This is a tiny extract from his original work, sourced from =niklas-luhmann-archiv.de=:

- 76: Causality
  - 76,2: Causality --- motivation
  - 76,5: Causailty as regular order
    - 76,5a: Causality: Equivalence of cause and effect

The notes are ordered to form a coherent idea, which is the main reason Luhmann was so efficient in writing. His articles and books grew as he added notes to the system. In the Zettelkasten method, each note has a unique ID. Please note that the Denote package does not enforce unique signatures.

You can easily implement the Zettelkasten method with Denote. The individual files are the 'Zettels', and your Denote directory is the 'Kasten'. Just like before, the signature can contain the reference number. You cannot precisely copy Luhmann's syntax because he uses characters in his signatures that you cannot use in filenames. In example list above, the last category would have =76=5=a= as a signature and individual notes would be something like =76=5=a1=.

* EDITED Managing your digital garden
:PROPERTIES:
:WORDCOUNT: 1107
:END:
Your collection of notes needs regular maintenance as ideas and structures of thought evolve over time. The names, keywords and signatures of notes can change over time as your digital garden grows and blossoms. 

Denote Org mode files hold metadata in both the file name and the file's front matter. ideally you like the file's name and the front matter to be in sync.  You can also change the title and the keywords by simply editing the text. For more convenience, use the ~denote-keyword-add~ (=C-c w d k=) and ~denote-keyword-remove~ (=C-c w d K=) functions to change tags with minibuffer completion. These last two functions will also rename the file. Using ~denote-rename-file-using-front-matter~ (=C-c w d R=) changes the filename using the data in the front matter. This function leaves the identifier unchanged, even when edited in the front matter.

The Denote-Explore package provides convenience functions to manage your collection of Denote files. You can find the shortcuts for the Denote-Explore package with the =C-c w x= prefix. This package provides four types of commands:

1. /Summary statistics/: Count notes, attachments and keywords.
2. /Random walks/: Generate new ideas using serendipity.
3. /Janitor/: Manage your denote collection.
4. /Visualisations/: Visualise your Denote files as a network.

** EDITED Summary statistics
:PROPERTIES:
:WORDCOUNT: 882
:END:
After a day of working hard in your digital knowledge garden, you might like to count the notes and attachments in your collection. Numbers are great, but a graph is worth a thousand numbers. The built-in =chart.el= package by Eric M. Ludlam is a quaint tool for creating bar charts in a plain text buffer. Two commands are available in Denote-Explore to visualise basic statistics using =chart.el=:

1. ~denote-explore-keywords-barchart~: Visualise the top /n/ keywords.
2. ~denote-explore-extensions-barchart~: Visualise used file extensions.

#+caption: Example of a bar chart of top-twenty keywords.
#+attr_html: :width 600 :alt Example of a bar chart of top-keywords :title Example of a bar chart of top-keywords  :width 80%
#+attr_latex: :width 0.6\textwidth
[[file:images/denote-keywords-barchart.png]]

** EDITED Random walks
:PROPERTIES:
:CUSTOM_ID: sec:walk
:WORDCOUNT: 745
:END:
Creativity springs from a medley of experiences, emotions, subconscious musings, and connecting random ideas. Intellectual serendipity transforms unrelated concepts into potentially new insights. Introducing random elements into the creative process generates avenues of thought you might not have travelled otherwise. This method can be beneficial when you're stuck in a rut or just like to walk through your files randomly. A random walk is an arbitrary sequence of events without a defined relationship between the steps. You take a random walk by jumping to an incidental note, connected or unconnected to the current buffer. The Denote-Explore package provides four commands to inject some randomness into your explorations:

1. ~denote-explore-random-note~: Jump to a random note or attachment.
2. ~denote-explore-random-link~: Jump to a random linked note (either forward or backwards) or attachments (forward only).
3. ~denote-explore-random-keyword~: Jump to a random note or attachment with the same selected keyword(s).
4. ~denote-explore-random-regex~: Jumpt to a random note matching a regular expression.

The default state is that these three functions jump to any Denote text file (plain text, Markdown or Org-mode). The universal argument (=C-u=) includes attachments as candidates for a random jump.

When jumping to a random file with the same keyword(s), you can choose between one or more keywords from the current buffer. When the current buffer is not a Denote file, choose any available keyword(s) in your Denote collection. The asterisk symbol =*= selects all keywords in the completion list.

** EDITED The janitor
:PROPERTIES:
:WORDCOUNT: 495
:END:
Just like any building needs a janitor to keep it clean and do some minor maintenance, your digital home also needs help. After using Denote for a while, you might need a janitor to keep your collection organised. 

The Denote package prevents duplicate identifiers when creating a new note. However, sometimes, you might have to manually create a date and time for an old document where the creation date is different from the date on the file system, as explained in section [[#sec:attachments]]. Adding the Denote identifier manually introduces a risk of duplication. Duplicates can also arise when exporting Denote Org mode files, as the exported files have the same file name but a different extension.

The ~denote-explore-identify-duplicate-notes~ command lists all duplicate identifiers in a popup buffer. Be careful when changing the identifier of a Denote file, as it can destroy the integrity of your links, so please ensure that the file you rename does not have any links pointing to it. Before changing an identifier, you can use ~denote-find-backlink~ (=C-c w d b=) to check whether a file has any links pointing to it.

With Denote-Explore, managing keywords is a breeze. The ~denote-explore-single-keywords~ command provides a comprehensive list of file tags that are only used once, making it easy to identify and address any issues. The list of single keywords is presented in the minibuffer, from where you can open the relevant note or attachment, streamlining your note management process.

You can also find notes or attachments without keywords with the ~denote-explore-zero-keywords~ command. This command presents all notes and attachments without keywords in the minibuffer, so you can open them and consider adding a keyword or leaving them as is.

You can remove or rename keywords with ~denote-explore-rename-keyword~. Select one or more existing keywords from the completion list and enter the new name of the keyword(s). This function renames all chosen keywords to their new version. It removes the original keyword from all existing notes when you enter an empty string as the new keyword. This function cycles through all notes and attachments containing the selected keywords and asks for confirmation before making any changes. The new keyword list is stored alphabetically, and the front matter is synchronised with the file name.

Denote stores the metadata for each note in the filename using its ingenious file naming convention. Some of this metadata is copied to the front matter of a note, which can lead to differences between the two metadata sources. The ~denote-explore-sync-metadata~ function checks all notes and asks the user to rename any file where these two data sets are mismatched. The front matter data is the source of truth. This function also enforces the alphabetisation of keywords, which assists with finding notes.

* EDITED Visualising notes as networks
:PROPERTIES:
:WORDCOUNT: 1440
:END:
Committing your ideas to text requires a linear way of thinking, as you can only process one word at a time. In my paper journal, I often use diagrams, such as a mind map, rather than a narrative to relate my thoughts. Visual thinking is another way to approach your ideas, and one of the most common methods to visualise interlinked documents is in a network diagram.

Linking ideas in a network is not a modern tool. Medieval monks sketched diagrams in the margins of books they read, connecting their short notes with lines. These diagrams are the source of the curly braces symbols ={}=, which originally indicated branching an idea into two new ones [cite:@even-ezra_2021_lines].

Viewing your thoughts as a network can help discover hitherto unseen connections between your thoughts. Visualising your Denote digital garden as a network can be helpful in your creative process. A network diagram has nodes (vertices) and edges. Each node represents a file in your Denote system, and each edge is a link between notes  (figure [[fig:network]]).

#+begin_src dot :file images/denote-explore-example.png
  digraph denote {
      graph[dpi=300]
      "A" [label="Node (file)"];
      "C" [label="Node (file)"];
      "E" [label="Node (file)"];
      "A" -> "E" [label = "Egdge (link)"];
      "A" -> "C" [label = "Egdge (link)"];
      "E" -> "C" [label = "Egdge (link)"];
  }
#+end_src
#+caption: Principles of a Denote file network.
#+name: :title Principles of a Denote file network fig:network
#+attr_html: :width 250
#+attr_latex: :width 0.4\textwidth
#+RESULTS:
[[file:images/denote-explore-example.png]]

The Denote-Explore package uses the functionality provided by external software to visualise the structure of parts of your Denote network. You need to install the Graphviz software to visualise networks. This tool converts plain text descriptions of a network into an image file. The network diagrams in this book are all created with GraphViz.

Denote-Explore does not offer a live environment in which to view your Denote collection's structure. The purpose of this functionality is to analyse the structure of your notes, not to act as an alternative user interface. Live previews of note networks are dopamine traps. While seeing the network of your thoughts develop in front of your eyes is satisfying, it can also become a distraction.

The ~denote-explore-network~ command provides three types of network diagrams to explore the relationships between your thoughts:

1. Community of notes
2. Neighbourhood of a note
3. Keyword structure

A community consists of notes that match a search term, which can be a regular expression. The software asks to enter a search term or regular expression. For example, all notes with Emacs as their keyword (=_emacs=). The graph displays all notes matching the search term and their connections. Any links to non-matching notes are pruned (dotted line to the =_vim= note in the example in Figure [[fig:community]]). Using an empty regular expression will generate a network of all available files.

#+begin_src dot :file images/denote-explore-community.png
  digraph cats {
      graph[dpi=300]
      subgraph {
          cluster=1;
          "A" [label="_emacs"];
          "B" [label="_emacs"];
          "C" [label="_emacs"];
          "D" [label="_emacs"];
          "A" -> "B" 
          "B" -> "C"};
          "B" -> "_vim" [style="dotted"]
      }
#+end_src
#+caption: Community of Denote files with "_Emacs" keyword.
#+name: fig:community
#+attr_html: :alt Community of Denote files with Emacs keyword :title Community of Denote files with Emacs keyword :width 400
#+attr_latex: :width 0.4\textwidth
#+RESULTS:
[[file:images/denote-explore-community.png]]

The neighbourhood of a note consists of all files linked to it at one or more steps deep. The algorithm selects members of the graph from linked and backlinked notes (such as C to A in figure [[fig:neighbourhood]]). This visualisation creates the possible paths you can follow with the ~denote-explore-random-link~ function discussed in section [[#sec:walk]].

#+begin_src dot :file images/denote-explore-neighbourhood.png
  digraph neighbourhood {
      graph[dpi=300]
      rankdir="LR";
      "A" [style=filled; fillcolor=lightgray];
      subgraph {
          cluster=1;
          label ="depth 1";
          "C" "B";
          };
          subgraph {
              cluster=1;
              label ="depth 2"
              "D" "F" "E"
              };
              "A" -> "B"
              "C" -> "A"
              "D" -> "B"
              "C" -> "F"
              "B" -> "E"
          }
#+end_src
#+caption: Denote neighbourhood of files (depth = 2).
#+name: fig:neighbourhood
#+attr_html: :alt Denote neighbourhood of files :title Denote neighbourhood of files :width 250
#+attr_latex: :width 0.4\textwidth
#+RESULTS:
[[file:images/denote-explore-neighbourhood.png]]

To generate a neighbourhood graph from a Denote note buffer, use ~denote-explore-network~ and enter the graph's depth. When building this graph from a buffer that is not a Denote note, the system also asks to select a source note. A depth of more than three is usually not informative because the network becomes very large and complex to read, or you hit the edges of your island of connected notes.

There will be files without connections. Depending on your note-taking strategy, you might want all your notes linked to another note. The ~denote-explore-isolated-notes~ function provides a list in the minibuffer of all notes without links or backlinks for you to peruse. You can select any note and add any links. Calling this function with the universal argument =C-u= excludes attachments in the list of lonely files.

The last available method to visualise your Denote collection is to develop a network of keywords. Two keywords are connected when used in the same note. All keywords in a note create a complete network. A complete network is one where all nodes are linked to each other. The union of all complete networks from all files in your Denote collection defines the keywords network. The relationship between two keywords can exist in multiple notes, so the links between keywords are weighted. The line thickness between two keywords indicates the frequency (weight) of their relationship (Figure [[fig:keywords]]).

While the first two graph types are directed (arrows indicate the direction of links), the keyword network is undirected as these are bidirectional associations between keywords. The diagram below shows a situation with two nodes and three possible keywords and how they combine into a keyword network.

#+begin_src dot :file images/denote-explore-keywords.png
  graph neighbourhood {
    rankdir="LR"
    subgraph cluster_union {
      label ="Union of notes"
      "H" [label="_kwd1"]
      "G" [label="_kwd2"]
      "I" [label="_kwd3"]
      "H" -- "G"  [penwidth=4]
      "H" -- "I"
      "G" -- "I"
    }

    subgraph cluster_note_1 {
      label ="Note 1"
      "A" [label="_kwd1"]
      "B" [label="_kwd2"]
      "A" -- "B"
    }

    subgraph cluster_note_2 {
      label ="Note 2"
      "C" [label="_kwd1"]
      "E" [label="_kwd2"]
      "D" [label="_kwd3"]
      "C" -- "D" 
      "C" -- "E"
      "E" -- "D"
    }
    
    // Invisible edges to align clusters horizontally
    "B" -- "C" [style="invis"]
  }
#+end_src
#+caption: Denote network of keywords.
#+name: fig:keywords
#+attr_html: :alt Denote network of keywords example :title Denote network of keywords example :width 600
#+attr_latex: :width 0.8\textwidth
#+RESULTS:
[[file:images/denote-explore-keywords.png]]

Denote-Explore searches the Denote files for links or keywords and converts this information to a GraphViz image. The diagrams themselves are saved as SVG files. Emacs activate use the software that your operating system uses to view SVG files. Ideally this should be the internet browser so you can leverage the full functionality of these files.

#+caption: Screenshot of a Denote neighbourhood graph created with Denote-Explore and GraphViz.
#+attr_html: :width 80% :alt Example of Denote neighbourhood graph :title Example of Denote neighbourhood graph
 [[file:images/denote-explore-neighbourhood-graphviz.png]]

The size of each node is proportional to the number of notes that are linked from or linked to the note. When the degree is more than two, the name of the node is displayed. When viewing the SVG file in a web browser, hovering the mouse over a node a popup window displays the note's metadata.

Clicking on a link will open the relevant file. You will need to configure your browser to open Org mode files with Emacs. Ideally you should configure Emacs as server so it does not open a new version for every link you click. You will find ample resources on the internet to show how to use Emacs as a server in your operating system.

You can regenerate the same network after you make changes to notes. The ~denote-explore-network-regenerate~ command recreates the current graph with the same parameters as the previous one, which is useful when you like to see the result of any changes without having to enter the search criteria again.

It might seem that adding more connections between your notes improves them, but this is not necessarily the case. The extreme case is a complete network where every file links to every other file. This situation lacks any interesting structure and wouldn't be very useful for analyses. So, be mindful of your approach to linking notes and attachments.

* Learn more
:PROPERTIES:
:WORDCOUNT: 118
:END:
This chapter only provides a brief introduction to the Denote package and its associated auxiliary packages. These packages have further extensive functionality to make the software behave the way it best suits your preferences.

The extensive Denote manual describes its full functionality in great detail, with lots of options to configure how it works. The Citar-Denote and Denote-Explore packages also provide manuals through the info system. You can access these three manuals with =C-h R denote= and selecting the relevant package.

Now that you have collected a lot of notes, it is time to start a writing project. The next chapter shows how to work on a large writing project using Org mode.
