#+title: Administration
#+bibliography: ../library/emacs-writing-studio.bib
:NOTES:
- [[https://blog.dornea.nu/2023/09/21/emacs-and-the-cybernetic-productivity/][Emacs and the Cybernetic Productivity - blog.dornea.nu]]
- [[https://orgmode.org/manual/Moving-subtrees.html][Moving subtrees (The Org Manual)]]
- [[https://git.sr.ht/~swflint/third-time][~swflint/third-time - Third Time support for Emacs - sourcehut git]]
- [[https://www.youtube.com/watch?v=NkhgIB64zgc][Emacs: Diary and Calendar - YouTube]]
- [[https://karl-voit.at/2020/08/14/project-mgt-draft/][A Draft Workflow for Advanced Project Management Using Org Mode and Org Edna]]
- Pommodoro
- [X] Clear your head
- [ ] Myth of multitasking
- [ ] Time poverty
- [ ] [[https://datamanagement.hms.harvard.edu/collect/file-naming-conventions][File Naming Conventions | Data Management]]
:END:

* Getting Things Done
In our time-poor world, everybody wants to cram more stuff into their day. Judging by the abundant literature, you can become so productive that "getting things done" [cite:@allen_2005_gett] only takes a "four-hour work week" [cite:@ferriss_2011_hour]. We achieve these almost magical powers by learning from the "habits of highly effective people" [cite:@covey_1990_seven] who seem to "eat frogs" for breakfast [cite:@tracy_2016_eat].

Methods to increase your productivity a dime-a-dozen on the internet and productivity books with well-meaning advice are available in every bookshop. In the wake of all this great advice, developers release a plethora of software to help you become more productive. The market is saturated with solutions, from software behemoths such as Microsoft's OneNote to nimble mobile apps such as Todoist.

The quest to become more productive has become a popular past time. Millions of people around the world struggle with the demands of life in the twenty-first century and they constantly look for ways to cram more activities into their day. Self-proclaimed productivity gurus have published piles of popular books about methods to get more done in your limited available time.

All these methods boil down to three basic phases: set a goal, define the actions to achieve that goal and undertake these actions. These principles might sound simplistic, but it is the basic truth. The plethora of methods merely discuss different ways on how to manage these three steps effectively and efficiently. A central theme of these methods are means to process the enormous amount of information that people are exposed to every day.

In the slipstream of the productivity gurus, software developers have released many apps to manage the information stream of our daily lives. The internet contains many stories about people who moved from one application to the next, in search of the perfect way to manage their projects and tasks. I was one of those people, until I started using Emacs.

Org mode is an ideal system to help you getting things done. The Org mode package not only allows you to write prose, it is also helps you to manage actions and projects. As with any other Emacs package, it provides virtually unlimited freedom to implement your favourite method to get stuff done.

This chapter shows how to use Org Mode to manage your projects and tasks, loosely based on David Allen's /Getting Things Done/ (GTD) method. David Allen describes iterative five steps to become more productive [cite:@allen_2005_gett]:

1. /Capture/: Empty your mind
2. /Clarify/: Describe what it all means
3. /Organise/ Place it where it belongs
4. /Reflect/: Reflect on your progress
5. /Engage/: Take action
  
** /Capture/: Empty Your Mind
One of the reasons we are often not as productive as we like is because our minds are filled with issues. When our brain is full of thoughts about what we should be doing, we start to worry about how busy we are instead of doing the thing we need to do. A brain only has a limited capacity as we can only have one thought at a time. When your brain is full of thoughts about what you should be doing, creative and productive thoughts are suppressed. The other problem with keeping ideas in your head is the risk that they will disappear in the fog of your brain. I am sure you all recognise the experience of having the most wonderful idea when enjoying your morning shower, but half an hour later you are unable to recall your gem.

The first step to getting things done is to empty your mind. This is not a Buddhism-inspired quest for enlightenment, but a simple technique to help you focus.

Open a new Org Mode file with the ~find-file~ command (=C-x c-f=). You can call it something like =todo.org=, or whatever you fancy. For the next fifteen minutes, write down everything that is floating around in your head. Dump the contents of your brain into this virgin Org Mode file. Try not to multitask when you empty your mind, but fully focus your attention on the list.

Start every new idea with an asterisk so that they become headlines. Your list will contain a jumble of random things. From minor household tasks to big future projects you want to do one day. Don't filter your thoughts. Just write them down. For the next twenty-five minutes, focus only on this task and write down everything that is in your head. Don't multitask and give this activity your undivided attention. Multitasking is the enemy of productivity because our brains can only focus on one intellectual activity at a time. The fact that magicians can so easily fool people illustrates why multitasking is a fool's errand. Perhaps listen to some music with the Emacs EMMS package to keep you focused.

Don't spend any time thinking about these tasks. Don't worry about when you'll need to do it or in what order they need to be done just yet. Ensure that your mind is empty by the time you complete your list. If the list only has about a dozen items, then your list is not complete. For most people, fifty actionable items, projects and fuzzy goals are not unusual. If you are overwhelmed by the list then don't shoot the messenger as it merely reflects your life. If it takes you longer than twenty five minutes to empty your mind, then take a five minute break and start again.

You now have a long list of all the stuff you need to get done. But that is only the starting point. Org mode also has functions that can capture tasks as they come up in random moments of the day.

#+begin_example
 * Mow the lawn
 * Clean up the backyard
 * Improve my job skills
 * Learn how to use Emacs
 * Write an ebook about ... (fill in your speciality)
 * Empty your e-mail inbox
 * Prepare presentation for the quarterly meeting next week
 * And so on, and so on ...
#+end_example

*** Using the Inbox

** /Clarify/: Describe what it all means
Did you notice that most things on the list above, apart from items 6 and 7, are more work than just one action? In GTD-speak, they are projects, which are desired outcomes that take more than one action to complete.

Your list will be a mess of tasks, projects, goals and vague ideas. Your next task is to organise them. Firstly you can add some order and hierarchy to the list with the =ALT= and arrow keys. =M-up= and =M-down= will move a heading up or down, while =M-right= and =M-left= will promote or demote your entry. With these four keystrokes, you can organise your list so that projects and tasks go together and create some order in the chaos that came from your mind. So the garden becomes a project with two tasks:

#+begin_src org :tangle no
,* Gardening
,** Clean up the backyard
,** Mow the lawn
#+end_src

You can also add notes or link images below any heading to provide some context to the task by hitting enter at the end of the headline and typing. Your list is starting to take shape now. The following steps will add more context to your tasks. 

** /Organise/ Place it where it belongs
:PROPERTIES:
:CUSTOM_ID: sec:organise
:END:
The problem with most todo-lists is that you get overwhelmed by the amount of stuff to be done. But in reality, most actions don't need or can't be progressed. You can be more precise in your records and mark items as the next action to be undertaken, or mark the ones where you are waiting for somebody else.

- /Next/: The next action to be taken.
- /Todo/: Something to be done in the future (either scheduled or as yet undetermined)
- /Waiting/: If you are waiting for somebody to do something, then mark it as such.

Org mode can associate each headline in a document with a workflow state. By default, there are only two states, =TODO= or =DONE=. You can change the state of a heading with the shift and arrow keys. Org mode will cycle between the two states. The keywords are commonly written in all caps, but that is not necessary.

You can define workflow states any way you like. Adding the following Lisp lines to your init file will set your workflow states. The states after the vertical bar will be marked as completed, usually coloured green.

If you have many states, cycling through them can be tedious. The =C-c C-t= command provides a popup menu to quickly select your option. You add the menu letter between parentheses after the keyword like this:

#+begin_src elisp :tangle no
  (setq-defualt org-todo-keywords
                '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|"
                            "DONE(d)" "CANCELLED(c)")))
#+end_src

/Emacs Writing Studio/ roughly follows the GTD approach and have a status for next actions, waiting for others or future actions. When an action is completed, it is either done or cancelled. There are, in principle, no limitations to how you use this functionality.

The basic principle of the GTD approach is not to have massive lists of items that you like to do one day but that you define the next action that needs to be done to achieve your goal, or schedule activities in your diary. This method ensures that only a subset of activities is in your consciousness and  you don't get overwhelmed by your inactivity as action lists tend to be long list of promises to our future selves.

You can set different keywords can for each Org file. When, for example, you are writing a book, you could set specific keywords for each heading with the following line in your header:

#+begin_src org :tangle no
,#+TODO: TODO(t) DRAFT(d) | DONE(c) EDITED(e)
#+end_src

Now that your list is nicely organised in the stuff you need to do, add dates to some of the tasks. Scheduling a task to a specific date is to commit your recalcitrant future self to the action.

You can add the date that the task is scheduled or a deadline by which is should be completed. A scheduled date indicates the date or period you plan to work on the task. A deadline is the time the task needs to be completed.

To add a scheduled date, use =C-c C-s= when on a headline. Emacs will pop up a calendar that you can use to select a date. The shift and arrow buttons move the timestamp by day or week. The =<= and =>= symbols move you a month in time. Press enter when done, and the date appears below the headline. You can add a deadline in a similar way but with the =C-c C-a= keystroke.

Timestamps use the ISO 8601 format: year, month, day. This format avoids any confusion between American formats and the rest of the world. Editing a timestamp is easy. Place your cursor on either the year, month or date and use the arrow keys to move it up or down.

#+begin_src org :tangle no
  ,* TODO Complete Org-Mode article
  SCHEDULED: <2021-05-08 Sat>
#+end_src

Scheduled dates can also set a regular schedule. For example, suppose you add, for instance, =+7d= at the end of the date. In that case, Org mode recalculates the date every time you complete the task and resets the status to =TODO=. You can also use the letters =w=, =m= and =y= for scheduling a job weekly, monthly or yearly. Some actions have to be undertaken weekly on the same day, but in some instances it is better to restart the clock every time it is completed.

My tax return has a deadline of 30 September and appears annually on that date, indicated by =+1y=. It is a deadline instead of a schedule because the tax office enforces this on me.

The next action is my weekly review of the inboxes. In this case, the seven days are recalculated every time I complete the action. So if I complete the review on 13 May instead of 11 May, the new date will become 20 May. The double plus symbol recalculates the new date from the day of the status change.

The last action states that I need to clean the dishwasher once each month. The =.+= indicate t

#+begin_src org :tangle no
  ,* TODO Submit tax return
  DEADLINE: <2021-09-30 Mon +1y>

  ,* TODO Weekly review
  SCHEDULED: <2021-05-11 Sun ++7d>

  ,* TODO Clean the dishwasher
  SCHEDULED: <2021-05-11 Sun .+1m>
#+end_src

Only add a scheduled date if this is the time that you plan to do the action. Try not to add too many self-imposed schedules because you will over commit your day. A deadline is only helpful if there is an external expectation that you need to complete something by a specific day, for example, get travel insurance before your flight leaves.

Some todo items in your list could use a checklist to remind yourself of the required steps. Org mode allows you to add checkbox items anywhere in your document by adding =[ ]= after a list indicator. Using =M-S <RET>= after a tick box item creates a new tick box. Ticking and un-ticking any items is as simple as hitting =C-c C-c= (~org-toggle-checkbox~). The snippet below is an example of a todo item with a deadline, some notes and a checklist.

#+begin_example
 * TODO Submit tax return
   DEADLINE: <2021-09-30 Mon +1y>
   Tax accountant: 0407 555 283
   - [X] Collect records
   - [ ] Prepare overview
   - [ ] Set appointment with accountant
#+end_example

You can convert a plain list item to a checkbox item, or vice versa, with =C-u C-c C-c=. You can also convert list items to headings and back again. The ~org-ctrl-c-star~ function (=C-c C-*=) converts a paragraph to a heading. If the line contains a checkbox, it becomes a TODO item. Using =C-c C--= (~org-ctrl-c-minus~) converts a paragraph or a heading to a list item.

** /Reflect/: Reflect on your progress
After a week or so, your inbox will start filling with stuff. Your inbox is not just one location, but a collection of places where you gather information. /Emacs Writing Studio/ uses the Org mode capture mechanism as an inbox, but it can also be a physical inbox to collect papers. A digital notebook on your phone or a physical diary to collect notes are also viable options.

My personal inbox consists of my Org mode inbox file, my email inbox, a cloud-based notes application in my phone a physical inbox and my physical diary. As part of my weekly review I promise myself to empty these locations and process them into my system using this flowchart, which is based on the classic GTD model.

#+caption: Example of a productivity workflow using Org mode.
#+name: fig:gtd
#+attr_html: :alt Example of a productivity workflow using Org mode :title Example of a productivity workflow using Org mode
[[file:images/org-mode-gtd.png]]

During your regular review, you assess each bit of information you collected. If it is not actionable, the you either ditch it, otherwise capture it in  [[{{% ref taking-notes-with-emacs-denote.org %}}][Denote]] as a permanent note.

If the new item is actionable and it only takes a few minutes to do, then just go ahead and do it; don't waste your time formally registering the action.

Lastly, if the inbox item is actionable, bur requires some time, you can add it as an action to your todo file. The status of each action depends on external circumstances.

** /Engage/: Take action
Emacs is a powerful multifunctional tool, but unfortunately, it cannot help you mow the lawn for you, go shopping or do the other tasks on your lists. Emacs can help you with any task that involves creating written content, but it can't mow the lawn for you. In the end, there is no productivity system in the world that does the tasks for you, no matter what the gurus promise. However, bringing order into your tasks keeps you focussed on your goals.

The key of any productivity workflow is to regularly review your list of actions, your priorities and goals and actually do  them. The central tool in Org mode to look at your list of registered actions is the agenda.

The agenda is a time-based summary of the actions in your todo file(s). You first need to add the relevant files to the agenda list. You add the file linked to the current buffer with ~org-agenda-file-to-front~ (=C-c [=). You can add multiple todo files to your agenda list, for example the inbox, a todo file for your personal life and one for your work.  You remove a file from the agenda list with ~org-remove-file~ (=C-c ]=). Once your agenda files are in the list, you can jump to them quickly with =C-'= (~org-cycle-agenda-files~). This command cycles through the registered agenda files.

The agenda function in org mode is highly versatile and configurable. When you evaluate the ~org-agenda~ function with =C-c a=, Org mode provides a menu for t he many types of 

You can change the status of items from within the agenda or jump to the file that contains the action, so you can ready any context or maintain checklist items.

The agenda starts with a self-explanatory menu screen which you can explore. Org mode has extensive capabilities to configure how the agenda is presented, which are outside the scope of this article.

** Learning More
Getting Things Done is just one of many methods to manage your busy life. This article shows how to implement the principles of David Allan's GTD method with Org mode. The beauty of Emacs is that you have the freedom to implement whatever method you prefer, so be creative and use Org mode to suit your needs.

Bavarian Org mode guru Rainer König has developed a comprehensive series of YouTube videos that explain using Org mode for managing actions and projects in great detail. Ranier has also published a more comprehensive course on Udemy, which provides more detail than the freely available videos [cite:@koenig_2020_org].

The key to a successful implementation of any productivity method is not to become you own abusive parent. Unless there are external deadlines, everything on my action list is optional. Putting the correct rubbish bin at the kerb is not optional, because I rely on the truck to pick it up. But actions such as writing a new chapter for this book are optional. Use the capabilities of managing your life with Org mode wisely and don't become a slave to the list and then loosing self-esteem because you can't keep up with your own expectations.

* Manage Files
:NOTES:
- [ ] [[https://emacs.stackexchange.com/questions/2433/shrink-zoom-scale-images-in-image-mode][Shrink/Zoom/Scale images in image-mode - Emacs Stack Exchange]]
- [ ] [[https://idiomdrottning.org/bad-emacs-defaults][Bad Emacs defaults]]
- [ ] =(= to hide metadata
:END:
:PROPERTIES:
:CUSTOM_ID: sec:dired
:END:
** Introduction
Working with Emacs means that you will need to access, create files and manage files on your drives. Emacs comes shipped with =dired= (pronounced /dir-ed/), a potent file manager. This article explains the basic principles of using dired and shows how to manage files with Emacs to organise your hard drive.

** Basic Operation of Dired
:NOTES:
- Writable Dired (https://www.masteringemacs.org/article/wdired-editable-dired-buffers)
:END:
Dired is short for “directory editor”, but it can do much more than just that. This software has an illustrious history. The first version of dired was a stand-alone program written circa 1974, so its origins lie even further back in time than Emacs. The software comes packaged with Emacs and it provides a front end to various GNU core utilities to manage files.

You activate the file manager with the ~dired~ function or the =C-x d= shortcut. After selecting the relevant directory Emacs creates a buffer with the content of the directory of the selected buffer. Another useful function is ~dired-jump~ (=C-x C-j=) which opens Dired and jumps to the file linked to the current buffer.

You can navigate the content with the arrow keys and press =j= to jump to a specific file by entering part of its name. The carat key =^= takes you to the parent folder.

The =q= button closes the dired window but does not kill (remove) it. Note that every time you open a new directory in Dired, Emacs opens a new Dired buffer. After a while, you litter your Emacs session with unused Dired buffers. Pressing the =a= key opens a directory in the same buffer. This functionality is disabled by default because the Emacs developers strangely believe that new users find it confusing. /Emacs Writing Studio/ configures this behaviour by default.

Denote includes a minor mode that formats compliant filenames in the directory editor so it is easy to recognise the individual items of the note's metadata. The filenames not only provide metadata for the note itself, they are also a heuristic to make it easy to find notes based on date, signatures, title or keyword (Figure [[fig:denote-dired]]).

#+caption: Extract of Denote files in Dired.
#+attr_html: :alt Extract of Denote files in Dired :title Extract of Denote files in Dired
#+name: fig:denote-dired
#+attr_latex: :width \textwidth
[[file:images/denote-dired.jpg]]

The enter key opens the respective file or directory. To open a file or directory in another window, press =o= (Using =C-o= open the file in another window, but the cursor stays in the Dired window). Emacs is a Swiss-Army chainsaw, but it cannot do everything. Sometimes you might like to open a file in other software, such as your image editor or video player. You can open files with external software by pressing =&= after which dired will ask for the appropriate software. You need to type the name of the executable file of the software you like to use, e.g. =gimp=.

To copy a file, press the =C= button. Dired will ask for a new name and location in the minibuffer. To move a file, you press =R= because moving a file is the same as renaming it with a new directory.

There is no need to close the buffer before you rename an open file. Emacs will link the open buffer to the new filename. 

If you have two open dired buffers, /Emacs Writing Studio/ copies and moves from the folder in the active window to the other dired buffer.

Renaming the file is the same as moving it. So press =R= and type a new filename.

It is sometimes useful to copy the name of a file to the kill ring with the =w= key, so you can use it to rename the file. So to rename a file, copy the name with =w=, rename the file with =R= and paste the existing name with =C-y= and edit the name to your new version.

You can select and deselect files for deletion (killed) with the =d= and =u= buttons. After you selected the files you like to delete, press =x= to execute the deletion. Press capital =D= if you like to remove a single file. When you delete or trash a currently open file, Emacs will also ask you to close the appropriate buffer. By default, Emacs permanently removes files. The /Emacs Writing Studio/ is configured so that files are moved to the recycle bin.

You can select multiple files to work on at the same time by marking them. The =m= button marks a file, and the =u= removes the mark. The capital =U= removes all marks in the buffer. The =t= key reverses your markings, which is helpful when you want to select everything but one or two files.

This method requires you to manually select each file. You can also use regular expressions to select files. Press =% m= to open the regular expression selection prompt. For example, =^2023.*_journal*= selects all Denote files that start with the =2023= and that have the =journal= file tag.  Now press =t= to invert the selection and =k= to remove the selected files from view. This sequence is a useful method to find related files.

After you selected multiple files in this manner, you can use all file commands to act on the selected targets, for example moving all 2023 files with the =_journal= tag to another folder.

If your head is buzzing with all the different key bindings, the table lists the functionality described in this chapter. The keybindings in Table [[#tab:dired]] are only a small snapshot of the functions of the directory editor in Emacs. You can press the =h= key while in a Dired buffer to view all functionality and related keybindings.

#+caption: Dired key bindings.
#+name: tab:dired
| Key   | Function                     | Action                                   |
|-------+------------------------------+------------------------------------------|
| =a=     | ~dired-find-alternate-file~    | Open folder in same buffer               |
| =C=     | ~dired-do-copy~                | Copy a file                              |
| =j=     | ~dired-goto-file~              | Jump to the file linked to active buffer |
| =g=     | ~revert-buffer~                | Refresh the dired buffer                 |
| =m=     | ~dired-mark~                   | Mark file under the cursor               |
| =% m=   | ~dired-mark-files-regexp~      | Mark by regular expression               |
| =o=     | ~dired-find-file-other-window~ | Open file in other window                |
| =C-o=   | ~dired-display-file~           | Display file in other window             |
| =q=     | ~quit-window~                  | Close the buffer                         |
| =R=     | ~dired-do-rename~              | Rename (move) a file                     |
| =t=     | ~dired-toggle-marks~           | Inverse marked files                     |
| =u=     | ~dired-unmark~                 | Unmark file under the cursor             |
| =U=     | ~dired-unmark-all-marks~       | Unmark all files                         |
| =&=     | ~dired-do-async-shell-command~ | Open file with other program             |
| =enter= | ~dired-find-file~              | Open file                                |

** File Naming Conventions
:NOTES:
- https://xkcd.com/1459/
- https://datamanagement.hms.harvard.edu/plan-design/file-naming-conventions
:END:

In the world of computing there is perhaps nothing ore personal than the names people give to files. While this almost infinite freedom to name a file any which way you prefer is a pinnacle of individual expression, it can lead to problems when managing large projects. Back in the days when offices on held paper archives, they had strict rules on how docents should be archived. Misplacing a piece of paper in an archives stretching many meters of folders meant that you would probably never find that document again. When in the 1980s office workers started to use computers, all such rigour and process was thrown out to the window and ultimate freedom and the associated chaos emerged.

The Denote file naming convention is good for any document where the data of creation matters.

My personal naming convention is expressed in the default settings of {{{ews}}}. My documents directory holds a subdirectory for my notes, projects and the bibliography.

There is no need to make copies of your files at each stage of the writing process with names such as =principia-methematica-rev.1.org=, =principia-methematica-draft.org= and other variations on this theme. Using  a version control system can 

** Recent Files and Bookmarks
Whenever you return to Emacs you might want to open a file you were working on recently. The recent files minor mode (~recentf-mode~) provides a transient list of the files you most recently opened. 

This minor mode saves the most recent opened files when you exit Emacs to a file in your configuration folder. However, it might be more useful to save the recent files regularly to ensure it is saved. The ~run-at-time~ function runs a function at a regular interval, in this case every five minutes. The ~recentf-edit-list~ function opens the file with your recent acquisitions and lets you delete selected files.

By default, the recent files mode stores the last twenty opened files, which you can change by modifying the ~recentf-max-saved-items~ variable.

Recent files are transient as they are continuously updated as you open new files. For a more permanent list of files you like to open, use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]].

You can store a file as a bookmark with =C-x r m= (~bookmark-set~). The bookmark will also store the location of the cursor, so you can maintain multiple bookmarks for a file. The default name for the bookmark is the name of the file. You can also enter a bespoke name in the minibuffer before hitting =ENTER=.

To view a list of all bookmarks in the minibuffer and select the one you like to open, use =C-x r b= (~bookmark-jump~). 

Bookmarks are saved in the =bookmarks= file in your configuration folder every time a new bookmark is created. The ~bookmark-save-flag~ is set to one so that the bookmarks file is saved every time you add a new one. The default value only saves it when you exit Emacs, which mean you could loose bookmarks in the unlikely event of an Emacs or system crash.

If you like to remove  bookmark no longer required then use the ~bookmark-delete~ function, which has no default keybinding but is bound to =C-x r D= in the /Emacs Writing Studio/ configuration.

* Viewing Images
You have already seen that Org mode can embed images and export these to the desired format. Emacs also has some built-in functionality to help you manage your collection of images.

Image-mode and the image-dired package are bundled with Emacs, so there is no need to install packages, but you might need some additional software. You can view images without external software, but you cannot manipulate them. The ImageMagick software suite provides functionality for editing and manipulating images.

Emacs can display various popular image formats out-of-the-box with image mode. You can open an image file directly with ~find-file~ (=C-x C-f=) or through the directory editor (dired). You can also open a linked image from within an Org file with =C-c C-o= (~org-open-at-point~) with the cursor on the image. Emacs automatically scales the image to snugly fit inside the display window. A range of keyboard shortcuts are available to view images. The =n= and =p= keys (next and previous) or the left and right arrows flick though the images in the current directory. Image mode also provides several commands to change the display size of images (I am unsure why the prefix key is =s= for some commands, but =i= for others, but alas):

- =s o=: Show image at original size (when it doesn't fit in the window, scroll through the image with the arrow keys).
- =s w=: Fit the current image to the height and width of the window.  
- =i +=: Increase the image size by 20%
- =i -=: Decrease the image size by 20%.

Furthermore, image mode can manipulate images, with the assistance of ImageMagick:

- =i r=: Rotate the image by 90 degrees clockwise.
- =i h=: Flip the image horizontally.
- =i v=: Flip the image vertically.
- =i c=: Crop the image.
- =i x=: Cut a rectangle from the image and replace with black.

The crop and cut commands display a rectangular frame superimposed on the image. Use the mouse to move and resize the frame. Type =m= to move the frame instead of resizing it and type =s= to convert the frame to a square. When you are satisfied with the result, type =enter= to crop or cut the image. You can exit the crop and cutting menu with =q= without changing the source file. Please note that these commands are only available when /ImageMagick/ is installed.

If you like to retain the result of the transformation, press =i o= to save the image under a new name. When you are done with watching images, use =q= to quit the image buffer, or =k= to kill the image buffer altogether.

** The Image-Dired Package
Viewing images individually is great, but wouldn't it be nice if you cold see thumbnails before delving into your collection? The Image-Dired package provides a thumbnail buffer to view and maintain images from within a Dired buffer using thumbnails. Evaluate the ~image-dired~ function and select the directory you like to use. Emacs splits the screen and presents a thumbnail screen (of up to a thousand entries) to explore your collection. Emacs stores the thumbnails in the configuration directory for future reference.

#+caption: Viewing some travel photos in Emacs with image-dired.
#+attr_html: :alt Viewing images with image-dired :title Viewing images with image-dired
[[file:images/image-dired-screenshot.jpg]]

Alternatively, when you are inside a Dired buffer that contains images, mark the images you like to view and generate the thumbnails with =C-t d= (~image-dired-display-thumbs~). If you don't mark any files, the program uses the image under the cursor.

Yet another method of previewing your images is by marking the ones you need and generate inline thumbnails inside the Dired buffer with =C-t C-t= (~image-dired-dired-toggle-marked-thumbs~). The same shortcut also removes the thumbnails.

The active image is marked with a flashing border around the thumbnail and its filename is displayed on the top of the thumbnail window.

You can navigate the thumbnails with the arrow keys. The =<= and =>= keys take you to the start or end of the collection. You can remove a thumbnail from the collection with =C-d=. If you have selected more images than thumbnails that can fit on page, then image-dired tracks your movement, so as your cursor moves up or down, the thumbnails refresh.

To view an image, hit =enter= when the thumbnail is marked. You cycle through the marked images in your collection with the =space= and =backspace= buttons, or =C-<left>= /  =C-<right>=.

But why manually flick through your album if you can let Emacs do this for you? The =S= key starts a slideshow with each image shown five seconds by default. You can configure the delay with the ~image-dired-slideshow-delay~ variable, or drive the slideshow manually with the =space= and =backspace= keys, or =C-<left>= /  =C-<right>=.

The main image display is in image mode, so all the actions described in the previous section apply.

As usual, =q= quits the image or thumbnail window.

The image-dired software can also create a plain text database of images with searchable tags and thumbnail descriptions. 

You tag images directly from a dired buffer. The =C-t t= keystrokes lets you tag the selected files. You can retrieve the tags in a future session using =C-t f= and view the image thumbnails with =C-t d=, as described above. You can tag images from within a thumbnail buffer with the =t t= shortcut. You can also add a comment to the image by pressing =c= in the thumbnail viewer.

The file name, tags and comments show in the mini buffer as you move through the image thumbnails: =directory: filename (tags): comment=.

Emacs stores the metadata in the =image-dired= directory in your configuration folder in the =.image-dired_db= file. This is a plain text file that lists each file name and the tags an comment.

Retrieving tagged files only selects images with tags in the directory of the current dired buffer. It does not work across multiple folders. 

This tagging system is nice, but it creates an integrity vulnerability in that it separates tags and files. When you accidentally remove the database, all metadata is lost. You will also loose access to the metadata when you rename an image.

An alternative method to tag files is to use the Denote file naming convention, which encodes metadata into the name of the file.
#+begin_export html
&nbsp;
#+end_export

Denote is a package to produce and maintain plain text notes, but it can also be used to maintain a collection of binary (non-text) files. When using the [[{{< ref "/productivity/taking-notes-with-emacs-denote.org" >}}][Denote file naming convention]] for your images, you can mark parts of you collection using regular expressions. The Denote file naming convention encodes four bits of metadata about a file into the filename. Only the timestamp is compulsory and serves as a unique identifier:

- Timestamp in ISO 8601 format
- An alphanumeric signature (starting with double equality sign (~==~)
- The title in [[https://www.freecodecamp.org/news/snake-case-vs-camel-case-vs-pascal-case-vs-kebab-case-whats-the-difference/][kebab-case]] (starting with double dash ~==~)
- Keywords in [[https://www.freecodecamp.org/news/snake-case-vs-camel-case-vs-pascal-case-vs-kebab-case-whats-the-difference/][snake_case]] (starting with double underscore =__=)

For example, one photo in my collection is: =19930825T132000--forbidden-city-throne-palace-of-heavenly-purity__china.jpg=. So this photo was taken on 25 August 1993, the title describes the topic of the photograph and 

I can now go into Dired and mark files with regular expressions, searching for each of these fields. For example, using =%m _china= marks photos taken in China, or =%m -city= all images with the word "city" in their title. Using the Dired convention for naming files is not only great for notes, it also helps you manage your photo collection.

The ~denote-rename-file~ function (=C-c w R=) lets you construct a Denote-compliant file name for existing images or other binary files. This function uses the last modified date as the identifier by default. But when you are sorting old collections you might want to add a date that is different to the last modified one. Adding the universal argument (=C-u=) will also ask you to provide a date and time, i.e. (=C-u C-c w R=).

Emacs is a powerful piece of software but it is mostly limited to editing text. To meaningfully work with images, you will need another package. Image-dired lets you open images in external viewers or editors by setting one variable.

Pressing =C-enter= opens the file in an external viewer or editor. You can tell Emacs which external viewer to user by configuring the =image-dired-external-viewer= variable. I linked it to the GIMP (GNU Image Manipulation Program). The content of this variable obviously depends on your system and preferred viewer.

When you are in an image-dired buffer, you open the external viewer with =C-enter=. Confusingly, when you are in a normal dired buffer, this function is bound to =C-t x=. /Emacs Writing Studio/ remaps the keys so that you can use =C-enter= in dired and in image-dired to open an image in your favourite external editor.
